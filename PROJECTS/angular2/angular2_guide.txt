=== Le fasi del ciclo di vita del componente ===
OnChanges
Si verifica quando il valore di una proprietà di input viene modificato. Oltre a verificarsi prima dell'inizializzazione del componente, si verifica anche ogni qualvolta cambia il valore delle proprietà di input

OnInit	
Rappresenta la fase di inizializzazione del componente e si verifica dopo il primo evento OnChanges.
Questa fase viene eseguita una sola volta durante il ciclo di vita del componente.

DoCheck	
Questa fase viene eseguita durante il check interno di Angular per valutare le modifiche ai componenti ed ai dati. Approfondiremo questo aspetto più avanti nella guida.

AfterContentInit	
In questa fase il contenuto associato al componente è stato inizializzato; in particolare, è stato costruito l'albero degli eventuali componenti figli.

AfterContentChecked	
Anche questa fase viene eseguita durante un check interno di Angular sui contenuti associati al componente. Come per la fase di DoCheck, essa risulterà più chiara quando parleremo in maniera più dettagliata del processo di change detection di Angular

AfterViewInit	
Questa è la fase di inizializzazione della view associata al componente. In questa fase il componente risulta mappato sul DOM ed è quindi visibile.

AfterViewChecked	
Come per le altre fasi checked, anche in questo caso questa fase riguarda il check interno di Angular sulla view appena generata.

OnDestroy	
Questa è l'ultima fase del ciclo di vita del componente e si verifica prima che Angular lo distrugga definitivamente.
Questa fase viene eseguita una sola volta durante il ciclo di vita del componente.

=== two-way data binding ===
Angular 2 non ha il two-way data binding predefinito, come accadeva nella versione 1.x. Tuttavia possiamo attivarlo utilizzando la sintassi mostrata nel seguente esempio:

<code>
	Inserisci un numero:
	<input type="number" [(ngModel)]="numero" /> 
	<div>
		Il doppio di {{numero}} &egrave; {{numero * 2}}
	</div>
</code>

per evitare il two-way data binding, dobbiamo indicare l'evento che scatena il binding come nell'esempio seguente:

<code>
	Inserisci un numero: 
	<input type="number" #numero (keyup)="0" /> 
	<div>
	    Il doppio di {{numero.value}} &egrave; {{numero.value * 2}}
	</div> 
</code>

Nel nostro caso abbiamo indicato l'evento keyup al quale abbiamo assegnato il valore zero, un'espressione che non fa assolutamente nulla. In questo caso abbiamo soltanto bisogno che l'evento sia preso in considerazione da Angular per aggiornare la view, dal momento che non abbiamo bisogno di effettuare elaborazioni complesse.

=== Direttive ===
I componenti non sono altro che direttive con un template.
Le direttive di attributo hanno il compito di modificare l'aspetto o il comportamento di un elemento. Esse si presentano come un normale attributo HTML a cui possono essere assegnate espressioni che rappresentano il comportamento desiderato. Esempi di direttive di attributo sono ngStyle e ngClass.
Le direttive strutturali modificano la struttura del DOM aggiungendo o rimuovendo elementi. Esempi di questa categoria di direttive sono ngIf, ngSwitch e ngFor.

=== Form ===
Angular 2 propone due approcci alla costruzione e gestione di form:
1) Template Driven Form: Si basa prevalentemente sulla definizione di una form tramite markup, inclusi i criteri di validazione, in modo simile all'approccio di Angular 1.x
2) Reactive Form: Detto anche Model Driven Form, questo approccio prevede una definizione minimale del template tramite markup e sposta la logica di validazione all'interno della definizione del componente. Inoltre prevede una modalità alternativa di costruzione della form stessa.